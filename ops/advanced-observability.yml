# Advanced Observability Configuration for Email Triage Service
# Comprehensive monitoring, tracing, and alerting setup

observability:
  # Distributed Tracing
  tracing:
    jaeger:
      enabled: true
      collector_endpoint: "http://jaeger-collector:14268/api/traces"
      agent_endpoint: "jaeger-agent:6831"
      sampling_strategy:
        type: "probabilistic"
        param: 0.1  # 10% sampling rate
        
      service_configuration:
        email_triage_api:
          sampling_rate: 0.2  # Higher sampling for API
          tags:
            environment: "production"
            version: "v2.1.0"
            team: "platform"
            
        email_classifier:
          sampling_rate: 0.05  # Lower sampling for ML models
          custom_tags:
            model_version: "v2.1.0"
            inference_type: "batch"
            
      trace_context_propagation:
        formats: ["jaeger", "b3", "w3c"]
        extract_baggage: true
        
    opentelemetry:
      enabled: true
      endpoint: "http://otel-collector:4317"
      protocol: "grpc"
      
      instrumentation:
        auto_instrumentation:
          - "requests"
          - "sqlalchemy" 
          - "redis"
          - "asyncio"
          
        custom_spans:
          - name: "email_classification"
            attributes: ["email_id", "classification_type", "confidence_score"]
          - name: "email_summarization"
            attributes: ["email_id", "summary_length", "processing_time"]
          - name: "response_generation"
            attributes: ["email_id", "response_type", "template_used"]

  # Advanced Metrics
  metrics:
    prometheus:
      scrape_configs:
        - job_name: "email-triage-api"
          static_configs:
            - targets: ["email-triage-api:8080"]
          scrape_interval: "15s"
          metrics_path: "/metrics"
          
        - job_name: "email-triage-ml-models"
          static_configs:
            - targets: ["email-classifier:8501", "email-summarizer:8501"]
          scrape_interval: "30s"
          
      recording_rules:
        - name: "email_processing_rules"
          rules:
            - record: "email_processing_rate"
              expr: "rate(emails_processed_total[5m])"
              
            - record: "email_processing_latency_p99"
              expr: "histogram_quantile(0.99, rate(email_processing_duration_seconds_bucket[5m]))"
              
            - record: "classification_accuracy"
              expr: "(correct_classifications_total / total_classifications_total) * 100"
              
            - record: "cost_per_email"
              expr: "infrastructure_cost_per_hour / email_processing_rate"
              
      custom_metrics:
        business_metrics:
          - name: "user_satisfaction_score"
            type: "gauge"
            description: "User satisfaction score from feedback"
            labels: ["classification_type", "user_segment"]
            
          - name: "email_backlog_size"
            type: "gauge"
            description: "Number of emails pending processing"
            labels: ["priority", "category"]
            
          - name: "model_drift_score"
            type: "gauge"
            description: "ML model drift detection score"
            labels: ["model_name", "model_version"]
            
        technical_metrics:
          - name: "cache_hit_ratio"
            type: "histogram"
            description: "Cache hit ratio for email processing"
            buckets: [0.5, 0.7, 0.8, 0.9, 0.95, 0.99]
            
          - name: "database_connection_pool_usage"
            type: "gauge"
            description: "Database connection pool utilization"
            labels: ["pool_name", "database"]

  # Structured Logging
  logging:
    centralized_logging:
      loki:
        enabled: true
        endpoint: "http://loki:3100"
        tenant_id: "email-triage"
        
      log_format: "json"
      log_level: "INFO"
      
      structured_fields:
        - timestamp
        - level
        - logger_name
        - message
        - trace_id
        - span_id
        - user_id
        - email_id
        - operation
        - duration_ms
        - error_type
        - error_message
        
    log_enrichment:
      correlation_id: true
      user_context: true
      request_context: true
      business_context:
        - email_category
        - priority_level
        - processing_stage
        
    log_retention:
      debug_logs: "7_days"
      info_logs: "30_days"
      warn_logs: "90_days"
      error_logs: "1_year"
      audit_logs: "7_years"
      
    sensitive_data_handling:
      pii_scrubbing: true
      field_redaction:
        - "email_content"
        - "user_email"
        - "personal_names"
      hash_identifiers: true

  # Application Performance Monitoring
  apm:
    application_insights:
      enabled: true
      connection_string: "${APP_INSIGHTS_CONNECTION_STRING}"
      
      performance_counters:
        - "cpu_usage_percent"
        - "memory_usage_mb"
        - "gc_collection_count"
        - "thread_count"
        - "requests_per_second"
        
      custom_events:
        - name: "EmailProcessingCompleted"
          properties: ["email_id", "classification", "processing_time_ms"]
        - name: "ModelInferencePerformed"
          properties: ["model_name", "batch_size", "inference_time_ms"]
        - name: "UserFeedbackReceived"
          properties: ["feedback_type", "satisfaction_score", "email_id"]
          
    synthetic_monitoring:
      enabled: true
      tests:
        - name: "api_health_check"
          url: "https://api.company.com/email-triage/health"
          frequency: "1_minute"
          locations: ["us-east", "eu-west", "ap-southeast"]
          
        - name: "email_classification_e2e"
          type: "api_test"
          steps:
            - "POST /api/emails/classify"
            - "GET /api/emails/{email_id}/status"
            - "GET /api/emails/{email_id}/result"
          frequency: "5_minutes"
          
        - name: "user_journey_simulation"
          type: "browser_test"
          script: "tests/synthetic/user_journey.js"
          frequency: "15_minutes"

  # Real User Monitoring
  rum:
    frontend_monitoring:
      enabled: true
      sample_rate: 0.1
      
      core_web_vitals:
        - "largest_contentful_paint"
        - "first_input_delay"
        - "cumulative_layout_shift"
        
      custom_metrics:
        - "email_load_time"
        - "classification_response_time"
        - "user_interaction_success_rate"
        
    user_session_tracking:
      enabled: true
      privacy_compliant: true
      session_timeout: "30_minutes"
      
      tracked_events:
        - "email_submitted"
        - "classification_viewed"
        - "feedback_provided"
        - "error_encountered"

# Alerting and Notification
alerting:
  alert_manager:
    configuration:
      global:
        smtp_smarthost: "smtp.company.com:587"
        smtp_from: "alerts@company.com"
        
      route:
        group_by: ["alertname", "cluster", "service"]
        group_wait: "10s"
        group_interval: "10s"
        repeat_interval: "1h"
        receiver: "web.hook"
        
        routes:
          - match:
              severity: "critical"
            receiver: "pagerduty"
            group_wait: "0s"
            repeat_interval: "5m"
            
          - match:
              severity: "warning" 
            receiver: "slack"
            group_interval: "5m"
            repeat_interval: "12h"
            
      receivers:
        - name: "pagerduty"
          pagerduty_configs:
            - service_key: "${PAGERDUTY_SERVICE_KEY}"
              description: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"
              
        - name: "slack"
          slack_configs:
            - api_url: "${SLACK_WEBHOOK_URL}"
              channel: "#email-triage-alerts"
              title: "Email Triage Alert"
              text: "{{ range .Alerts }}{{ .Annotations.description }}{{ end }}"
              
        - name: "email"
          email_configs:
            - to: "oncall@company.com"
              subject: "Email Triage Alert: {{ .GroupLabels.alertname }}"
              body: |
                {{ range .Alerts }}
                Alert: {{ .Annotations.summary }}
                Description: {{ .Annotations.description }}
                Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
                {{ end }}

  # Smart Alerting
  intelligent_alerting:
    alert_correlation:
      enabled: true
      correlation_window: "5_minutes"
      max_correlated_alerts: 10
      
    alert_suppression:
      maintenance_windows:
        - name: "weekly_maintenance"
          schedule: "0 2 * * SUN"  # Every Sunday at 2 AM
          duration: "2h"
          
      dependency_mapping:
        email_triage_api:
          dependencies: ["database", "redis", "ml_models"]
          suppress_dependent_alerts: true
          
    alert_enrichment:
      runbook_automation:
        enabled: true
        runbook_base_url: "https://runbooks.company.com/email-triage"
        
      context_injection:
        - "recent_deployments"
        - "related_incidents"
        - "resource_utilization"
        - "user_impact_assessment"

# Dashboards and Visualization
dashboards:
  grafana:
    dashboards:
      executive_dashboard:
        title: "Email Triage - Executive View"
        refresh: "5m"
        panels:
          - "email_processing_volume"
          - "user_satisfaction_trend"
          - "cost_efficiency_metrics"
          - "availability_sla"
          
      operational_dashboard:
        title: "Email Triage - Operations"
        refresh: "30s"
        panels:
          - "service_health_overview"
          - "performance_metrics"
          - "error_rate_breakdown"
          - "resource_utilization"
          - "queue_depth_monitoring"
          
      ml_model_dashboard:
        title: "Email Triage - ML Models"
        refresh: "1m"
        panels:
          - "model_accuracy_trends"
          - "inference_latency"
          - "model_drift_detection"
          - "feature_importance"
          - "prediction_confidence"
          
      security_dashboard:
        title: "Email Triage - Security"
        refresh: "1m"
        panels:
          - "authentication_failures"
          - "rate_limiting_events"
          - "anomaly_detection"
          - "compliance_status"
          
    automated_annotations:
      deployments: true
      incidents: true
      maintenance_windows: true
      alert_events: true

# Data Export and Integration
data_export:
  metrics_export:
    destinations:
      - type: "datadog"
        api_key: "${DATADOG_API_KEY}"
        tags: ["service:email-triage", "environment:production"]
        
      - type: "new_relic"
        license_key: "${NEW_RELIC_LICENSE_KEY}"
        app_name: "Email Triage Service"
        
      - type: "custom_webhook"
        url: "https://analytics.company.com/metrics"
        format: "json"
        batch_size: 100
        
  log_export:
    destinations:
      - type: "elasticsearch"
        endpoint: "https://es.company.com:9200"
        index_pattern: "email-triage-logs-%{+YYYY.MM.dd}"
        
      - type: "splunk"
        endpoint: "https://splunk.company.com:8088"
        token: "${SPLUNK_HEC_TOKEN}"
        index: "email_triage"
        
  trace_export:
    destinations:
      - type: "zipkin"
        endpoint: "http://zipkin:9411/api/v2/spans"
        
      - type: "aws_xray"
        region: "us-east-1"
        service_name: "email-triage"

# Performance and Cost Optimization
optimization:
  data_retention:
    metrics:
      raw_metrics: "15_days"
      downsampled_5m: "30_days"
      downsampled_1h: "90_days"
      downsampled_1d: "1_year"
      
    traces:
      detailed_traces: "7_days"
      sampled_traces: "30_days"
      
    logs:
      debug_logs: "3_days"
      application_logs: "30_days"
      error_logs: "90_days"
      
  storage_optimization:
    compression: true
    compaction_strategy: "time_based"
    cold_storage_transition: "30_days"
    
  query_optimization:
    query_caching: true
    result_caching: true
    query_timeout: "30s"
    max_concurrent_queries: 50