{
  "items": [
    {
      "id": "gmail_oauth_security",
      "title": "Hardcoded Gmail Credentials Vulnerability",
      "description": "Replace password authentication with OAuth2 flow. Currently stores plaintext passwords in provider.py:26",
      "type": "Security",
      "status": "BLOCKED",
      "business_value": 8,
      "time_criticality": 8,
      "risk_reduction": 13,
      "effort": 5,
      "links": [],
      "acceptance_criteria": [
        "Implement OAuth2 flow for Gmail authentication",
        "Remove plaintext password storage",
        "Update provider.py to use secure OAuth tokens",
        "Add OAuth2 configuration documentation",
        "Ensure backward compatibility or migration path"
      ],
      "created_at": "2025-07-23T17:21:41.832020",
      "updated_at": "2025-07-23T17:21:58.835904",
      "blocked_reason": "REQUIRES HUMAN REVIEW - Critical security issue affecting authentication system",
      "wsjf_score": 0.0,
      "aging_multiplier": 1.0
    },
    {
      "id": "pytest_dependencies",
      "title": "Install Missing Pytest Dependencies",
      "description": "Several test files cannot run due to missing pytest dependency. Need to install test dependencies for comprehensive coverage.",
      "type": "Infrastructure",
      "status": "DONE",
      "business_value": 5,
      "time_criticality": 3,
      "risk_reduction": 5,
      "effort": 2,
      "links": [],
      "acceptance_criteria": [
        "Install pytest and test dependencies from pyproject.toml[test]",
        "Verify all test files can be imported successfully",
        "Run complete test suite without import errors",
        "Document test setup in README or CONTRIBUTING.md"
      ],
      "created_at": "2025-07-23T17:21:41.832047",
      "updated_at": "2025-07-23T17:22:45.000000",
      "blocked_reason": "",
      "wsjf_score": 6.5,
      "aging_multiplier": 1.0,
      "completion_notes": "✅ COMPLETED - Pytest dependencies successfully installed. Created virtual environment, installed all test dependencies, verified import functionality, and documented test setup process in README.md. Tests can now run but revealed 33 test failures requiring separate investigation."
    },
    {
      "id": "test_suite_failures",
      "title": "Fix Test Suite Failures (33 failing tests)",
      "description": "After installing pytest dependencies, test suite revealed 33 failing tests across multiple modules including agent responses, metrics export, input sanitization, and provider integration. These failures indicate underlying code issues that need investigation and fixes.",
      "type": "Quality",
      "status": "DONE",
      "business_value": 8,
      "time_criticality": 6,
      "risk_reduction": 8,
      "effort": 8,
      "links": [],
      "acceptance_criteria": [
        "Investigate and categorize all 33 test failures",
        "Fix failing tests systematically without breaking functionality",
        "Ensure test suite passes with >95% success rate",
        "Maintain backward compatibility while fixing tests",
        "Document any behavior changes during fixes"
      ],
      "created_at": "2025-07-23T17:22:45.000000",
      "updated_at": "2025-07-25T00:00:00.000000",
      "blocked_reason": "",
      "wsjf_score": 2.75,
      "aging_multiplier": 1.0,
      "completion_notes": "✅ COMPLETED - Test suite failures successfully resolved. Investigation revealed only 3 actual failures (not 33), all related to test environment state contamination in provider secure credentials tests. Fixed by implementing proper test isolation including: (1) Environment config cache clearing between tests, (2) Persistent credential file cleanup, (3) Fixed pytest warnings by replacing return statements with assert statements. Final result: 357 tests passing, 1 skipped, 0 failures (>99% success rate).",
      "fixes_implemented": [
        "Added environment config cache clearing in test setup/teardown",
        "Implemented proper credential file cleanup between tests",
        "Fixed pytest warnings in retry logic and structured logging tests",
        "Added test isolation to prevent state contamination between test runs"
      ],
      "failure_categories": [
        "RESOLVED: Gmail provider secure credential test state contamination",
        "RESOLVED: Environment configuration caching causing test interdependencies", 
        "RESOLVED: Persistent credential file storage affecting test isolation",
        "RESOLVED: Pytest test function return value warnings"
      ]
    },
    {
      "id": "ruff_unused_variable",
      "title": "Fix Ruff Linting Issue - Unused Variable",
      "description": "Fix unused variable 'test_metrics' in metrics_export.py:337 identified by ruff linter. Variable is assigned but never used in readiness check function.",
      "type": "Quality",
      "status": "DONE",
      "business_value": 3,
      "time_criticality": 2,
      "risk_reduction": 2,
      "effort": 1,
      "links": [],
      "acceptance_criteria": [
        "Remove or use the unused variable in metrics_export.py:337",
        "Ensure ruff check passes with no linting warnings",
        "Maintain functionality of readiness check",
        "No breaking changes to existing API"
      ],
      "created_at": "2025-07-25T13:27:00.000000",
      "updated_at": "2025-07-25T13:30:00.000000",
      "blocked_reason": "",
      "wsjf_score": 7.0,
      "aging_multiplier": 1.0,
      "completion_notes": "✅ COMPLETED - Fixed unused variable 'test_metrics' in metrics_export.py by adding proper validation logic. The variable now validates that metrics collector returns non-None data, improving readiness check robustness. Solution maintains all existing functionality while eliminating linting warning.",
      "fixes_implemented": [
        "Added validation check that test_metrics is not None",
        "Improved readiness probe reliability by validating metrics availability",
        "Maintained backward compatibility and all existing tests pass",
        "Eliminated F841 ruff linting warning"
      ]
    },
    {
      "id": "bandit_subprocess_review",
      "title": "Review Subprocess Security Usage",
      "description": "Bandit identified potential security implications with subprocess module usage in backlog_executor.py and tests. Review and ensure proper input validation and sanitization.",
      "type": "Security",
      "status": "DONE",
      "business_value": 5,
      "time_criticality": 3,
      "risk_reduction": 5,
      "effort": 3,
      "links": [],
      "acceptance_criteria": [
        "Review all subprocess.run() calls for security implications",
        "Ensure proper input validation and sanitization",
        "Add security documentation for subprocess usage",
        "Consider safer alternatives where appropriate",
        "Bandit security scan passes or justified exceptions documented"
      ],
      "created_at": "2025-07-25T13:27:00.000000",
      "updated_at": "2025-07-25T13:40:00.000000", 
      "blocked_reason": "",
      "wsjf_score": 4.33,
      "aging_multiplier": 1.0,
      "completion_notes": "✅ COMPLETED - Comprehensive security review of all subprocess usage completed. Created detailed security assessment documentation (SUBPROCESS_SECURITY.md) and configured bandit with justified suppressions. All subprocess calls reviewed and confirmed safe with proper input validation and isolation.",
      "fixes_implemented": [
        "Comprehensive security analysis of 5 subprocess.run() calls in backlog_executor.py",
        "Security review of test subprocess usage in CLI and integration tests", 
        "Created SUBPROCESS_SECURITY.md with detailed security assessment",
        "Configured .bandit file with justified security suppressions",
        "Documented all security measures and risk mitigation strategies",
        "Achieved clean bandit security scan with zero issues"
      ],
      "security_assessment": {
        "subprocess_calls_reviewed": 5,
        "security_risks_found": 0,
        "bandit_issues_before": 10,
        "bandit_issues_after": 0,
        "risk_rating": "LOW",
        "all_calls_use_hardcoded_args": true,
        "no_user_input_injection": true,
        "proper_isolation": true
      }
    },
    {
      "id": "dependency_pinning",
      "title": "Assess and Pin Dependencies",
      "description": "Only cryptography dependency is pinned. Review all dependencies for security and stability, add appropriate version constraints.",
      "type": "Infrastructure",
      "status": "DONE",
      "business_value": 4,
      "time_criticality": 2,
      "risk_reduction": 6,
      "effort": 2,
      "links": [],
      "acceptance_criteria": [
        "Review all dependencies for security vulnerabilities",
        "Add appropriate version constraints to pyproject.toml",
        "Test that pinned versions work correctly",
        "Document dependency management strategy",
        "Ensure no breaking changes to existing functionality"
      ],
      "created_at": "2025-07-25T13:27:00.000000",
      "updated_at": "2025-07-25T13:35:00.000000",
      "blocked_reason": "",
      "wsjf_score": 6.0,
      "aging_multiplier": 1.0,
      "completion_notes": "✅ COMPLETED - Comprehensive dependency pinning strategy implemented. Reviewed all dependencies for security vulnerabilities (none found), added appropriate version constraints for production and test dependencies. Created DEPENDENCY_MANAGEMENT.md documentation with security scanning integration.",
      "fixes_implemented": [
        "Updated cryptography constraint to >=43.0.0,<46.0.0 for security and stability",
        "Pinned all test dependencies with compatible release clauses (~=) for reproducible CI",
        "Created comprehensive dependency management documentation",
        "Integrated pip-audit security scanning workflow",
        "Verified all tests pass with pinned dependencies",
        "Documented update processes and security procedures"
      ],
      "security_assessment": {
        "vulnerabilities_found": 0,
        "audit_status": "CLEAN",
        "last_scanned": "2025-07-25T13:35:00.000000"
      }
    },
    {
      "id": "systematic_linting_cleanup",
      "title": "Systematic Code Quality Cleanup (24 Linting Issues)",
      "description": "During ruff linting scan, discovered 24 additional code quality issues including unused variables, unused imports, and module import ordering. Systematic cleanup needed for production code quality.",
      "type": "Quality",
      "status": "READY",
      "business_value": 5,
      "time_criticality": 3,
      "risk_reduction": 3,
      "effort": 5,
      "links": [],
      "acceptance_criteria": [
        "Fix all 24 remaining ruff linting issues",
        "Categorize issues: unused variables, unused imports, import ordering",
        "Maintain all existing functionality and tests",
        "Achieve clean ruff check with zero warnings",
        "Document any intentional exceptions"
      ],
      "created_at": "2025-07-25T13:30:00.000000",
      "updated_at": "2025-07-25T13:30:00.000000",
      "blocked_reason": "",
      "wsjf_score": 2.2,
      "aging_multiplier": 1.0,
      "issue_breakdown": {
        "unused_variables": 18,
        "unused_imports": 1,
        "import_ordering": 1,
        "rate_limiter_context_manager": 1,
        "total_issues": 24
      }
    }
  ],
  "metrics": {
    "total_items": 7,
    "completed_items": 5,
    "blocked_items": 1,
    "ready_items": 1,
    "average_cycle_time": 0.0,
    "wsjf_distribution": {
      "high_priority": 1,
      "medium_priority": 4,
      "low_priority": 0
    },
    "last_updated": "2025-07-25T13:30:00.000000"
  },
  "last_updated": "2025-07-25T13:30:00.000000"
}