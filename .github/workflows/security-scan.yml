name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # =============================================================================
  # CODEQL ANALYSIS
  # =============================================================================
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # =============================================================================
  # DEPENDENCY VULNERABILITY SCAN
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  # =============================================================================
  # CONTAINER SECURITY SCAN
  # =============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t crewai-email-triage:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'crewai-email-triage:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # =============================================================================
  # SECRET SCANNING
  # =============================================================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install detect-secrets
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets

      - name: Create secrets baseline if not exists
        run: |
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan --baseline .secrets.baseline
          fi

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins

      - name: Run detect-secrets audit
        run: |
          detect-secrets audit .secrets.baseline

  # =============================================================================
  # SECURITY SCORECARD
  # =============================================================================
  scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # =============================================================================
  # SECURITY NOTIFICATIONS
  # =============================================================================
  notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, secret-scan]
    if: always()
    
    steps:
      - name: Check security scan results
        run: |
          echo "Security scan results:"
          echo "- CodeQL: ${{ needs.codeql.result }}"
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "- Container Scan: ${{ needs.container-scan.result }}"
          echo "- Secret Scan: ${{ needs.secret-scan.result }}"

      - name: Create security report
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL Analysis**: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan**: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failures
        if: needs.codeql.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' || needs.secret-scan.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "ðŸš¨ Security scan failures detected in repository"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}