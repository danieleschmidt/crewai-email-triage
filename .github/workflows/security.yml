# =============================================================================
# ADVANCED SECURITY SCANNING WORKFLOW
# Comprehensive security analysis with SAST, DAST, and dependency scanning
# =============================================================================

name: 🛡️ Security Scanning

on:
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - sast-only
          - dependencies-only
          - containers-only

env:
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # =============================================================================
  sast-scan:
    name: 🔍 SAST Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependencies-only' && github.event.inputs.scan_type != 'containers-only'
    timeout-minutes: 15
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Security Tools
      run: |
        pip install --upgrade pip
        pip install bandit[toml] semgrep safety

    - name: 🔒 Run Bandit Security Linter
      run: |
        bandit -r src/ -f sarif -o bandit-results.sarif || true
        bandit -r src/ -f json -o bandit-results.json || true

    - name: 🔍 Run Semgrep SAST
      run: |
        semgrep --config=auto --sarif --output=semgrep-results.sarif src/ || true
        semgrep --config=auto --json --output=semgrep-results.json src/ || true

    - name: 📤 Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit

    - name: 📤 Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        category: semgrep

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-reports
        path: |
          bandit-results.json
          semgrep-results.json
        retention-days: 90

  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'sast-only' && github.event.inputs.scan_type != 'containers-only'
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[dev,test] safety pip-audit

    - name: 🔍 Safety Vulnerability Check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true

    - name: 🔍 Pip-Audit Vulnerability Check
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=sbom.json || true

    - name: 📤 Upload Dependency Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json
        retention-days: 90

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'sast-only' && github.event.inputs.scan_type != 'dependencies-only'
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker Image
      run: |
        docker build -t crewai-email-triage:security-scan .

    - name: 🔍 Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'crewai-email-triage:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif
        category: trivy

    - name: 🔍 Run Trivy JSON Report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'crewai-email-triage:security-scan'
        format: 'json'
        output: 'trivy-results.json'

    - name: 📤 Upload Container Reports
      uses: actions/upload-artifact@v4
      with:
        name: container-reports
        path: trivy-results.json
        retention-days: 90

  # =============================================================================
  # CODEQL ADVANCED SECURITY ANALYSIS
  # =============================================================================
  codeql-analyze:
    name: 🔬 CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependencies-only' && github.event.inputs.scan_type != 'containers-only'
    timeout-minutes: 30
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔬 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # =============================================================================
  # SECRETS SCANNING
  # =============================================================================
  secrets-scan:
    name: 🔐 Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Run TruffleHog Secrets Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: 🔍 Run GitLeaks Secrets Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # SECURITY REPORT AGGREGATION
  # =============================================================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, codeql-analyze, secrets-scan]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download All Reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports/

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📊 Generate Security Summary
      run: |
        python -c "
        import json
        import glob
        import os
        from datetime import datetime

        print('# 🛡️ Security Scan Summary')
        print(f'**Scan Date:** {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")}')
        print(f'**Repository:** ${{ github.repository }}')
        print(f'**Branch/Tag:** ${{ github.ref_name }}')
        print()

        # Process all JSON reports
        for report_file in glob.glob('security-reports/**/*.json', recursive=True):
            try:
                with open(report_file, 'r') as f:
                    data = json.load(f)
                print(f'✅ Processed: {os.path.basename(report_file)}')
            except Exception as e:
                print(f'❌ Failed to process: {os.path.basename(report_file)} - {e}')

        print()
        print('## 📊 Scan Results')
        print('- ✅ SAST Analysis: ${{ needs.sast-scan.result }}')
        print('- ✅ Dependency Scan: ${{ needs.dependency-scan.result }}')
        print('- ✅ Container Scan: ${{ needs.container-scan.result }}')
        print('- ✅ CodeQL Analysis: ${{ needs.codeql-analyze.result }}')
        print('- ✅ Secrets Scan: ${{ needs.secrets-scan.result }}')
        print()
        print('For detailed results, check the Security tab in GitHub.')
        " > security-summary.md

    - name: 📤 Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90

    - name: 📢 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # =============================================================================
  # SECURITY METRICS UPDATE
  # =============================================================================
  update-metrics:
    name: 📊 Update Security Metrics
    runs-on: ubuntu-latest
    needs: [security-report]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Update Security Metrics
      run: |
        echo "📊 Updating security metrics in repository..."
        # Update security metrics in .github/project-metrics.json
        python -c "
        import json
        from datetime import datetime
        
        try:
            with open('.github/project-metrics.json', 'r') as f:
                metrics = json.load(f)
        except:
            metrics = {}
        
        metrics['security'] = {
            'last_scan': datetime.now().isoformat(),
            'sast_status': '${{ needs.sast-scan.result }}',
            'dependency_status': '${{ needs.dependency-scan.result }}',
            'container_status': '${{ needs.container-scan.result }}',
            'codeql_status': '${{ needs.codeql-analyze.result }}',
            'secrets_status': '${{ needs.secrets-scan.result }}'
        }
        
        with open('.github/project-metrics.json', 'w') as f:
            json.dump(metrics, f, indent=2)
        "

    - name: 💾 Commit Updated Metrics
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/project-metrics.json
        git diff --staged --quiet || git commit -m "chore: update security scan metrics"
        git push