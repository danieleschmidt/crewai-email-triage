# =============================================================================
# CONTINUOUS DEPLOYMENT WORKFLOW
# Advanced deployment pipeline with staging/production environments
# =============================================================================

name: 🚀 Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel deployments

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.crewai-email-triage.dev
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 🐳 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to Staging
      run: |
        echo "🎭 Deploying to staging environment..."
        echo "📊 Image: ${{ steps.meta.outputs.tags }}"
        # Add your staging deployment commands here
        # kubectl apply -f k8s/staging/ --set image.tag=${{ github.sha }}

    - name: 🧪 Run Smoke Tests
      run: |
        echo "🧪 Running staging smoke tests..."
        # Add smoke tests for staging environment
        # python scripts/smoke-tests.py --env staging

  # =============================================================================
  # PRODUCTION DEPLOYMENT (Tags only)
  # =============================================================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://crewai-email-triage.com
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 🐳 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Blue-Green Deployment
      run: |
        echo "🟦 Starting blue-green deployment..."
        echo "📊 Version: ${{ github.ref_name }}"
        # Implement blue-green deployment strategy
        # ./scripts/blue-green-deploy.sh ${{ github.ref_name }}

    - name: 🧪 Production Smoke Tests
      run: |
        echo "🧪 Running production smoke tests..."
        # Add comprehensive production smoke tests
        # python scripts/smoke-tests.py --env production --comprehensive

    - name: 📊 Update Monitoring
      run: |
        echo "📊 Updating monitoring dashboards..."
        # Update monitoring with new version info
        # curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" -d "version=${{ github.ref_name }}"

  # =============================================================================
  # PYPI RELEASE (Tags only)
  # =============================================================================
  release-pypi:
    name: 📦 Release to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/crewai-email-triage/
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Build Tools
      run: |
        pip install --upgrade pip build twine

    - name: 🏗️ Build Package
      run: python -m build

    - name: ✅ Verify Package
      run: twine check dist/*

    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # =============================================================================
  # SECURITY SCANNING POST-DEPLOYMENT
  # =============================================================================
  security-scan:
    name: 🛡️ Post-Deployment Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success')
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Container Security Scan
      run: |
        echo "🔍 Scanning deployed containers for vulnerabilities..."
        # Add container security scanning
        # trivy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging

    - name: 🌐 Dynamic Application Security Testing
      run: |
        echo "🌐 Running DAST against staging environment..."
        # Add DAST scanning
        # zap-full-scan.py -t https://staging.crewai-email-triage.dev

  # =============================================================================
  # PERFORMANCE MONITORING
  # =============================================================================
  performance-monitor:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Baseline Performance Check
      run: |
        echo "📊 Establishing performance baseline..."
        # Add performance monitoring
        # python scripts/performance-baseline.py --env staging

    - name: 🚨 Setup Alerting
      run: |
        echo "🚨 Configuring performance alerts..."
        # Configure performance alerting
        # kubectl apply -f monitoring/alerts/performance-alerts.yml

  # =============================================================================
  # DEPLOYMENT STATUS NOTIFICATION
  # =============================================================================
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, release-pypi]
    if: always()
    
    steps:
    - name: 📢 Send Deployment Notification
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "🎉 Production deployment successful!"
          # Send success notification
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "🎭 Staging deployment successful!"
          # Send staging notification
        else
          echo "❌ Deployment failed or skipped"
          # Send failure notification
        fi