# =============================================================================
# CONTINUOUS INTEGRATION WORKFLOW
# =============================================================================

name: üß™ Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # =============================================================================
  # CHANGES DETECTION
  # =============================================================================
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
      docker: ${{ steps.changes.outputs.docker }}
      github: ${{ steps.changes.outputs.github }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'src/**'
              - 'tests/**'
              - 'pyproject.toml'
              - 'requirements*.txt'
              - '*.py'
            docs:
              - 'docs/**'
              - '*.md'
              - 'mkdocs.yml'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - '.dockerignore'
            github:
              - '.github/**'

  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Lint with Ruff
        run: |
          ruff check src tests --output-format=github
          ruff format --check src tests

      - name: Type check with MyPy
        run: mypy src tests --show-error-codes

      - name: Security check with Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # TESTING MATRIX
  # =============================================================================
  test:
    name: üß™ Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.python == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/ \
            --cov=src/crewai_email_triage \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=pytest-results.xml \
            -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            pytest-results.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # BUILD VERIFICATION
  # =============================================================================
  build:
    name: üèóÔ∏è Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # =============================================================================
  # SUCCESS GATE
  # =============================================================================
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "Quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All checks passed!"