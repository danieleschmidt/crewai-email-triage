# =============================================================================
# CONTINUOUS INTEGRATION WORKFLOW
# Advanced CI pipeline with comprehensive testing and security scanning
# =============================================================================

name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily security scan at 3 AM UTC
    - cron: '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[dev,test]

    - name: 🧹 Run Ruff Linting
      run: ruff check --output-format=github .

    - name: 🎨 Check Code Formatting
      run: ruff format --check .

    - name: 🔍 Type Check with MyPy
      run: mypy src/ --show-error-codes

    - name: 🔒 Security Scan with Bandit
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: 📤 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # =============================================================================
  # COMPREHENSIVE TESTING MATRIX
  # =============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Optimize CI time by excluding some combinations
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[test,performance]

    - name: 🧪 Run Unit Tests
      run: pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --junit-xml=test-results.xml

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: test-results.xml
        retention-days: 30

  # =============================================================================
  # PERFORMANCE & SECURITY TESTING
  # =============================================================================
  advanced-testing:
    name: 🚀 Advanced Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[test,performance,dev]

    - name: ⚡ Performance Benchmarks
      run: pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json

    - name: 🔒 Security Integration Tests
      run: pytest tests/ -m security -v

    - name: 📊 Memory Profile Check
      run: python scripts/performance-monitor.py --check-memory-leaks

    - name: 📤 Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  # =============================================================================
  # DEPENDENCY SECURITY AUDIT
  # =============================================================================
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[dev]

    - name: 🔍 Dependency Vulnerability Scan
      run: safety check --json --output safety-report.json || true

    - name: 📤 Upload Security Audit
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit
        path: safety-report.json
        retention-days: 30

  # =============================================================================
  # BUILD VERIFICATION
  # =============================================================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Build Tools
      run: |
        pip install --upgrade pip build twine

    - name: 🏗️ Build Package
      run: python -m build

    - name: ✅ Verify Package
      run: twine check dist/*

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # =============================================================================
  # DOCKER BUILD VERIFICATION
  # =============================================================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: crewai-email-triage:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Image
      run: |
        docker run --rm crewai-email-triage:test --help

  # =============================================================================
  # FINAL STATUS CHECK
  # =============================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, advanced-testing, security-audit, build, docker]
    if: always()
    
    steps:
    - name: ✅ Check All Jobs Status
      run: |
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ Some CI jobs failed"
          exit 1
        elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
          echo "⚠️ Some CI jobs were cancelled" 
          exit 1
        else
          echo "✅ All CI jobs passed successfully"
        fi